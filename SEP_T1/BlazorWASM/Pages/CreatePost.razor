@page "/CreatePost"
@attribute [Authorize]
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject IUserService userService;
@inject IPostService postService;
@inject NavigationManager navMgr

<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <div>
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div>
            <label>Description:</label>
            <textarea rows="8" cols="20" @bind="postBody" style="alignment: center"></textarea>
        </div>
        <div>
            <label>Location:</label>
            <input type="text" @bind="location"/>
        </div>
        <div>
            <select @bind="selectedValue">
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div>
            <label>Picture:</label>
            <input type="text" @bind="picture"/>
        </div>
        <div>
            <label>Price:</label>
            <input type="text" @bind="price"/>
        </div>


    </div>

    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    // private IEnumerable<User>? users;
    //   private int? selectedUserId;

    private string postTitle = "";
    private string postBody = "";
    private DateTime creationDate = DateTime.Now;
    private string location = "";
    private string picture = "";
    private string price;

    private string selectedValue="";
    private List<CategoryReadDto> categoryReadDtos;
    List<string> categories;

    private string msg = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    AuthenticationState authState;
    ClaimsPrincipal user;
    PostCreationDto dto;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        authState = await AuthState;
        user = authState.User;
        creationDate = DateTime.Now;
        var temp = await postService.GetAllCategoriesAsync();
        var readDtos = temp.ToList();
        categoryReadDtos = readDtos.ToList();
        categories = readDtos.Select(x => x.Description).ToList();
        try
        {
    //    users = await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";

        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "description cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(location))
        {
            msg = "location cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(price))
        {
            msg = "price cannot be less than 0!";
            return;
        }

        try
        {
            var test = selectedValue;
            var test2 = categoryReadDtos;
            var idOfCategorySelected = categoryReadDtos.First(x => x.Description.Equals(test)).Id;
            int id = int.Parse(user.FindFirst("Id").Value);
            dto = new(id, postTitle, postBody, creationDate, location, idOfCategorySelected, picture, double.Parse(price));
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/ViewPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}