@page "/ViewPosts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Collections
@inject IPostService PostService;
@inject IUserService UserService;

@inject NavigationManager NavMgr
@attribute [Authorize]

        <h3>Posts</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Category:</label>
                <input type="text" @bind="categoryFilter"/>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
            <div class="filter">
                <label>Max Price:</label>
                <input type="text" @bind="maxPriceFilter"/>
            </div>
            /*<div class="filter">
                <label>Body contains:</label>
                <input type="text" @bind="bodyContainsFilter"/>
            </div>*/
            <div>
                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: red">@msg</label>
                }
                
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadPosts">Load</button>
</div>

@if (posts == null)
{
}
else if (!posts.Any())
{
    <p>No Todos to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>CreationDate</th>
            <th>Location</th>
            <th>Price</th>
            <th>Category</th>
            <th>Details</th>
            <AuthorizeView Policy="IsAdmin">
                <th>Edit</th>
                <th>Delete</th>
            </AuthorizeView>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts.OrderByDescending(post =>post.creationDate))
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.description</td>
                <td>@item.creationDate</td>
                <td>@item.location</td>
                <td>@item.price</td>
                <td>@item.categoryString</td>
                <td>
                    <img src="icons/viewButton.png" class="funnel" @onclick="@(() => NavMgr.NavigateTo($"/ViewPostDetails/{item.Id}"))"/>
                </td>
                <AuthorizeView Policy="IsAdmin">
                    <td>
                        <img src="icons/edit.gif" class="funnel" @onclick="@(() => NavMgr.NavigateTo($"/EditPost/{item.Id}"))"/>
                    </td>
                    <td>
                        <label @onclick="@(() => RemovePost(item.Id))" style="cursor:pointer; color: red; font-weight: bold">
                            &#x2717;
                        </label>
                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<PostReadDto>? posts;
    private string msg = "";
    private bool doShowFilters = false;

    private int? categoryFilter;
    private int? maxPriceFilter;
   // private int? userIdFilter;
    private string? titleContainsFilter;
    private string? bodyContainsFilter;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            bool? completedFilterValue = null;
            posts = await PostService.GetAsync( categoryFilter, maxPriceFilter,titleContainsFilter/*, bodyContainsFilter*/);
            
            var list = new List<PostReadDto>(posts!);
            
            foreach (var post in list)
            {
                var category = await PostService.GetPostCategoryAsync(post.Id);
                post.categoryString = category.Description;
            }
            list.Sort(CompareById);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    //todo do we need this?
    private int CompareById(PostReadDto x, PostReadDto y)
    {
        if (x.Id > y.Id)
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
    
    private async Task RemovePost(int postId)
    {
        msg = "";
        try
        {
            await PostService.DeleteAsync(postId);

            var list = new List<PostReadDto>(posts!);
            list.RemoveAll(post => post.Id == postId);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}
