@page "/ViewUsers"
@attribute [Authorize(Policy = "IsAdmin")]
@using Domain.Models
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IUserService userService
@inject IRatingService ratingService;

<h3 style="text-align: center">Overview of all users</h3>

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No users to be found</span>
}
else
{
    <div class="users-container">
        @foreach (UserReadDto user in users)
        {
            <div class="user-card">
                <div>
                    <label>Username: @user.UserName</label>
                </div>
                <div>
                    <label>Role: @user.Role</label>
                </div>
                <div>
                    <label>Name: @user.Name</label>
                </div>
                <div>
                    <label>Email: @user.Email</label>
                </div>
                <div>
                    <label>Phone Number: @user.PhoneNumber</label>
                </div>
                <div>
                    <label>Address: @user.Address</label>
                </div>
                <div>
                    <label>Rating: @user.Rating</label>
                </div>
            </div>
        }
    </div>
}

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<UserReadDto>? users;
    private string msg = "";

    private string? name;
    private IEnumerable<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        

        try
        {
            users = await userService.GetUsers();
            
            foreach (var userReadDto in users)
            {
                var ratings = await ratingService.GetRatingsMadeToUser(userReadDto.Id);
                userReadDto.Rating = (int)ratings.Average(r => r.RatingValue);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

        userClaims = user.Claims;
        name = user.Identity!.Name!;
        
    }
    
}
