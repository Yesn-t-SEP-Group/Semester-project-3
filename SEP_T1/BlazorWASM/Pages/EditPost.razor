@page "/EditPost/{id:int}"
@attribute [Authorize]
@using Domain.DTOs
@using Domain.Models
@using Domain.Models.enums
@using HttpClients.ClientInterfaces
@inject IPostService postService;
@inject IUserService userService;
@inject NavigationManager navMgr;

@if (!loadingCompleted)
{
    msg = "Loading...";
}
else
{
    <div class="container text-center">
        <h3>Update Post</h3>
    </div>

    <div class="form-group field">
        <label>Title:</label>
        <input type="text" class="form-control" @bind="dto.Title"/>
    </div>

    <div class="form-group field">
        <label>Description:</label>
        <input type="text" class="form-control" @bind="dto.description"/>
    </div>

    <div class="form-group field">
        <label>Location:</label>
        <input type="text" class="form-control" @bind="dto.location"/>
    </div>

    <div class="form-group field">
        <label>Category:</label>
        <select class="form-control" @bind="selectedValue">
            <option value="">Please select a category</option>
            @foreach (var category in categories)
            {
                <option value="@category">@category</option>
            }
        </select>

    </div>

    <div class="form-group field">
        <label>Picture:</label>
        <input type="text" class="form-control" @bind="dto.picture"/>
    </div>

    <div class="form-group field">
        <label>Price:</label>
        <input type="text" class="form-control" @bind="dto.price"/>
    </div>

    <div class="form-group field">
        <label>Status:</label>
        <select class="form-control" @bind="statusValue">
            <option value="0" selected>Choose a status</option>
            <option value="1">Active</option>
            <option value="2">Sold</option>
            <option value="3">Frozen</option>
        </select>
    </div>
        
    <div class="form-group field">
        <label>Note: you must select a category and a status even if you dont want to change it!</label>
        
    </div>
    <div class="button-row">
        <button @onclick="UpdateAsync" class="btn btn-primary">Update</button>
    </div>
}

@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private PostUpdateDto? dto;
    private string msg = "";
    private int statusValue = 0;
    private bool loadingCompleted = false;
    private string selectedValue = "";
    private List<CategoryReadDto> categoryReadDtos;
    private List<string> categories;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            PostReadDto postData = await postService.GetByIdAsync(Id);
            dto = new(Id)
            {
                Title = postData.Title,
                description = postData.description,
                OwnerId = postData.OwnerId,
                categories = postData.categories,
                Id = postData.Id,
                location = postData.location,
                picture = postData.picture,
                price = postData.price
            };
            var temp = await postService.GetAllCategoriesAsync();
            var readDtos = temp.ToList();
            categoryReadDtos = readDtos.ToList();
            categories = readDtos.Select(x => x.Description).ToList();
            loadingCompleted = true;
            msg = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task UpdateAsync()
    {
        try
        {
            var statusAsEnum = (StatusEnum)Enum.ToObject(typeof(StatusEnum), statusValue);
            if (statusAsEnum == StatusEnum.Undefined)
            {
                throw new ArgumentException("Status is not defined");
            }
            if (selectedValue == "")
            {
                throw new ArgumentException("Status is not defined");
            }
            var test = selectedValue;
            var idOfCategorySelected = categoryReadDtos.First(x => x.Description.Equals(test)).Id;
            dto.categories = idOfCategorySelected;
            dto.Status = statusAsEnum;
            await postService.UpdateAsync(dto);
            navMgr.NavigateTo("/MyPosts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}