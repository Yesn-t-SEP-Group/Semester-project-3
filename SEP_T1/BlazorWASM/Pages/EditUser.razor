@page "/EditUser/{id:int}"
@attribute [Authorize]
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService;
@inject IUserService userService;
@inject NavigationManager navMgr;

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Post</label>
    }
    else if (dto == null)
    {
        <label>Loading Post data..</label>
    }
    else
    {
        <h3>Update User</h3>
        <div class="form-group field">
            <label class="label">Username:</label>
            <input type="text" class="form-control" @bind="dto.UserName" />
        </div>
        <div class="form-group field">
            <label class="label">Name:</label>
            <input type="text" class="form-control" @bind="dto.Name" />
        </div>
        <div class="form-group field">
            <label class="label">Email:</label>
            <input type="text" class="form-control" @bind="dto.Email" />
        </div>
        <div class="form-group field">
            <label class="label">PhoneNumber:</label>
            <input type="text" class="form-control" @bind="dto.PhoneNumber" />
        </div>
        <div class="form-group field">
            <label class="label">Address:</label>
            <input type="text" class="form-control" @bind="dto.Address" />
        </div>
        <div class="form-group field">
            <label class="label">Role:</label>
            <input type="text" class="form-control" @bind="dto.Role" />
        </div>

        <div class="button-row">
            <button @onclick="UpdateAsync" class="btn btn-primary">Update</button>
        </div>

    }
    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color: red">@msg</label>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private UserUpdateDto dto = null!;
    private string msg = "";
    private IEnumerable<UserReadDto>? users;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
           // PostReadDto todoData = await postService.GetByIdAsync(Id);
            UserReadDto currentlyAssigned = users.First(user => user.Id.Equals(Id));



            dto = new(Id)
            {
                UserName = currentlyAssigned.UserName,
                Name = currentlyAssigned.Name,
                Email = currentlyAssigned.Email,
                PhoneNumber = currentlyAssigned.PhoneNumber,
                Address = currentlyAssigned.Address,
                Role = currentlyAssigned.Role,
                //rating = currentlyAssigned.Rating,
               // registeredOn = currentlyAssigned.RegistrationDateTime,
               // lastSeen = currentlyAssigned.LastSeenDateTime,
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task UpdateAsync()
    {
        try
        {
            await userService.UpdateAsync(dto);
            navMgr.NavigateTo("/usersCRUD");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}