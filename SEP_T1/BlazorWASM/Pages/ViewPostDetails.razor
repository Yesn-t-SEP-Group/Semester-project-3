@page "/ViewPostDetails/{id:int}"
@attribute [Authorize]

@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@using AutoMapper
@using System.Security.Claims
@inject IPostService postService;
@inject IUserService userService;
@inject NavigationManager navMgr;
@inject IReportService reportService;
@inject IMessageService messageService;
@inject IRatingService ratingService;

<div class="container">
    <div class="form-group">
        <h2 class="col-sm-12">
            <input type="text" @bind="dto.Title" disabled="disabled" class="form-control"/>
        </h2>
    </div>
    <div class="form-group">
        <img src="@imgSrc" alt="NO IMAGE FOUND" class="col-sm-12" style="width: 400px;"/>
    </div>
    <div class="form-group">
        <label class="col-sm-2">Price:</label>
        <input type="text" @bind="dto.price" disabled="disabled" class="form-control col-sm-2" style="text-align: center"/> DKK
    </div>
    <div class="form-group">
        <textarea @bind="dto.description" disabled="disabled" class="form-control col-sm-12" style="height: 300px">DESCRIPTION</textarea>
    </div>
    <div class="form-group">
        <input type="text" @bind="dto.location" disabled="disabled" class="form-control col-sm-12"/>
    </div>
    <div class="form-group">
        <label class="col-sm-2">Category:</label>
        <input type="text" @bind="dto.categories" disabled="disabled" class="form-control col-sm-10"/>
    </div>
</div>


<div class="container">
    <div class="form-group">
        <h4>Posted by:</h4>
        <ul>
            <li class="col-sm-6">
                <input type="text" @bind="dto.Owner.UserName" disabled="disabled" class="form-control"/>
            </li>
            <li class="col-sm-6">
                <input type="text" @bind="userAvgRating" disabled="disabled" class="form-control"/>
            </li>
            <li class="col-sm-6">
                <input type="text" @bind="dto.Owner.Email" disabled="disabled" class="form-control"/>
            </li>
            <li class="col-sm-6">
                <input type="text" @bind="dto.Owner.PhoneNumber" disabled="disabled" class="form-control"/>
            </li>
        </ul>
    </div>
</div>

<h3>Leave a review after you bought the item!</h3>
<input type="number" min="1" max="5" @bind="ratingValue">
<button type="button" @onclick="@(() => leaveReview())">Report</button>


<div class="container d-flex flex-row justify-content-start">
    <div class="card mr-2">
        <h4 class="card-header text-danger font-weight-bold">REPORT USER</h4>
        <div class="card-body">
            <textarea class="form-control" rows="8" cols="20" @bind="reportReason"></textarea>
            <br/>
            <label class="text-danger">@msg</label>
            <br/>
            <button type="button" class="btn btn-danger" @onclick="@(() => reportUser())">Report</button>
        </div>
    </div>

    <div class="card ml-2">
        <h4 class="card-header text-info font-weight-bold">Write message to user</h4>
        <div class="card-body">
            <textarea class="form-control" rows="8" cols="20" @bind="dmContent"></textarea>
            <br/>
            <label class="text-info">@msg</label>
            <br/>
            <button type="button" class="btn btn-primary" @onclick="@(() => writeDM())">Send Message</button>
        </div>
    </div>
</div>

<div>
    <button type="button" @onclick="@(() => navMgr.NavigateTo($"/ViewPosts"))">Return</button>
</div>


@code
{
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private PostDetailDto dto = null!;
    private string msg = "";
    private IEnumerable<UserReadDto>? users;
    private string imgSrc;
    private string? reportReason = "";
    private string? dmContent = "";
    AuthenticationState authState;
    ClaimsPrincipal user;
    private UserReadDto owner;
    private int ratingValue = 1;
    private int userAvgRating = 0;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthState;
        user = authState.User;

        msg = "";
        try
        {
            users = await userService.GetUsers();
            PostReadDto postData = await postService.GetByIdAsync(Id);
            owner = users.First(user => user.Id.Equals(postData.OwnerId));
            CategoryReadDto categoryDescription = await postService.GetPostCategoryAsync(Id);

            dto = new()
            {
                Title = postData.Title,
                description = postData.description,
                Id = postData.Id,
                categories = categoryDescription.Description,
                location = postData.location,
                picture = postData.picture,
                price = postData.price,
                Owner = owner
            };
            imgSrc = dto.picture;
            var allRatings = await ratingService.GetRatingsMadeToUser(owner.Id);
            userAvgRating = (int)allRatings.Average(x => x.RatingValue);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void reportUser()
    {
        if (reportReason != null)
        {
            ReportCreationDto reportDto = new ReportCreationDto()
            {
                ReportedUserId = owner.Id,
                Reason = reportReason
            };
            reportService.CreateReport(reportDto);
            navMgr.NavigateTo($"/ViewPosts");
        }
        else
        {
            msg = "Must give a reason for reporting the user!";
        }
    }

    private void writeDM()
    {
        if (dmContent != null && !dmContent.Equals(""))
        {
            var myId = int.Parse(user.Claims.FirstOrDefault(c => c.Type == "Id")?.Value!);

            var messageCreationDto = new MessageCreationDto()
            {
                MessageText = dmContent,
                UserToId = owner.Id,
                UserFromId = myId,
            };
            messageService.CreateMessageAsync((messageCreationDto));
            msg = "Message sent!";
        }
        else
        {
            msg = "Must give a message to send!";
        }
    }

    private void leaveReview()
    {
        var myId = int.Parse(user.Claims.FirstOrDefault(c => c.Type == "Id")?.Value!);

        RatingCreationDto rating = new RatingCreationDto()
        {
            RatingValue = ratingValue,
            UserFromId = myId,
            UserToId = owner.Id,
        };
        ratingService.CreateRating(rating);
        navMgr.NavigateTo($"/ViewPosts");
    }

}